#where to save checkpoints
save_path: "/network/scratch/t/tengmeli/neurips_rebuttals/seco"

# load existing checkpoint for inference. If passing experiment folder instead (for multiple seeds), it will evaluate all of them.
load_ckpt_path: ""  #"baseline_resnet18_RGBNIR_ENV_RM_all_classes"
save_preds_path: ""
log_comet: true

overfit_batches: 0.0
# maximum number of epochs to train for
max_epochs: 30
# base directory
base_dir: 
#use geographical information
loc:
  use: False
  #if True :concatenate location features with satellite image features, else location features are mappe to same imension as satellite features and the features are multiplie
  loc_type: "latlon"   #latlon or state
  concat: True

comet:
  project_name: "neurips_rebuttal" #"ecosystem-duck"
  tags: ["resnet18", "SECO"]
  experiment_name: "baseline_seco" # specify for training, or use to report test results, TODO: also use to resume training
  experiment_key: "" # use to report test results,

experiment:
  #TASK and name should always be ebird_classifier --> maybe remove it
  task: "ebird_classifier"
  name: "ebird_classifier"
  seed: 42
  module:
    #choose model : "resnet18" "resnet50" "inceptionv3" "linear" (just a linear model)
    model: "resnet18"
    #"linear" or "linear_net" for a 2 layer MLP
    fc: "linear"
    #use pretrained weights ( torchvision )
    pretrained: True
    # resume training from another model (transfer learning), set empty if training from scratch
    resume: "/network/projects/ecosystem-embeddings/seco_weights.pkl"
    #initializes biases of the output layer sothat sigmoid(bias) = mean over the training set for each species
    init_bias: ""
    means_path: ""
    lr: 0.0003

optimizer: "Adam"  #"Adam"

#auto lr will only work if there is only one optimizer
auto_lr_find: False
scheduler:
  name: "ReduceLROnPlateau" #"" for no schuler, "ReduceLROnPlateau" #"ReduceLROnPlateau" or "StepLR" "WarmUp"
  reduce_lr_plateau:
    factor: 0.5
    lr_schedule_patience: 20
  step_lr:
    step_size: 100
    gamma: 0.5
  warmup:
    warmup_epochs: 5
    max_epochs: 100

  cyclical:
    warmup_epochs: 10

variables: &default_vars
    ped_means: &ped_means [ 2224.420309023486,  1375.0698022249692,  19.672978986402967,  18.700889987639062,  28.777218788627934,  60.628986402966625,  37.39778739184178,  43.89644004944376]
    ped_std: &ped_std [2188.960171719183,  108.22330946194883, 7.456411390867124,  6.77247026947937,  20.84382929719657, 8.69522170598666,9.703678889814272, 12.995087617570592]
    bioclim_means: &bioclim_means [ 11.134843130004848, 12.329890403984956, 36.18685325203155, 834.347379975149, 29.115660674107506, -5.897155924653691, 35.012816615920904, 15.153635727770956, 6.677405323025904,  21.26147452212093,  0.7134672273660256,  907.1536367172306,  113.73991961623234,  42.56360571879825,  35.81181241500895,  314.3499640512476,  146.83487146847708,  232.5151515151515,  219.20772485649965]
    bioclim_std: &bioclim_std ( [  4.6117379547883885,  2.211384155086635, 8.062874043800441, 208.07859883088548,  3.523568024265508, 6.851891361344845, 6.283959194450869,  8.141544478974403, 10.784604563052183,  3.742546886835624,  6.533418293360478,  367.73944887655057,  48.43338059626148,  28.50777335024875,  24.388325463795216,  136.2720865533372, 91.55640353508493,  121.33949584662388, 146.6017198844734]

    rgbnir_means: &rgbnir_means [1601.4255168 , 1849.46275542, 1800.35387118, 3942.84243728]
    rgbnir_std: &rgbnir_std [ 422286.27043123,451999.55462607,656503.60336865,1667852.6746658]

    visual_means: &visual_means [78.20186183, 83.78967871, 58.99852628]
    visual_stds: &visual_stds [64.32016159, 49.08529428, 46.45643505]

data:
  loaders:
    num_workers: 8
    batch_size: 128
  #What kind of satellite input ? "refl" for "raw" reflectance values or
  #"img" for 0-255 values (only supported for "rgb" and "nir" bands)
  datatype: "refl"
  multiscale : [64]

  bands: ["r","g","b", "nir"]  #any subset of ["r", "g", "b", "nir"] if working with "refl" data or ["rgb", "nir"] if using "img"

  res: 10 #resolution of the images

  #o you want to use environmental data (pedological and bioclimatic (low res) data) #ped" or "bioclim" or both or empty list
  env: ["ped", "bioclim"]

  #resolution of pedological and bioclimatic data in meters
  ped:
      #pedological rasters
      res: 250
  bioclim:
      #bioclim
      res: 1000

  files:
    base: "/network/projects/ecosystem-embeddings/ebird_dataset/USA_summer"
    train: "summer_hotspots_train.csv"
    val: "summer_hotspots_valid.csv"
    test: "summer_hotspots_test.csv"
    correction_thresh: "final_range_maps_2.pkl" # range maps - threshold = False

  correction_factor:
     thresh: "after" # to train with RM

  target:
    type: "probs"  #binary for classification targets  or "probs" for regression (default should be "probs")

    # choose subset of birds : "ducks" for trying on species [37] or [2] for cooper's hawk (non passerine) "songbirds" (307 species) or None (full set 684 species) "not_songbirds"
    subset: #"/network/projects/ecosystem-embeddings/ebird_dataset/USA_summer/species_data/random_subset.npy"

  #normalization: None
  transforms:
    - name: matchres
      ignore: false
      subset: ["bioclim", "ped"]
      target_size: [64, 64]
      custom_means: [*bioclim_means, *ped_means]

    - name: crop
      ignore: false
      p: 1
      ignore_band: ["bioclim", "ped"] #["bioclim", "ped"]
      center: true # disable randomness, crop around the image's center
      height: 64
      width: 64
    - name: hflip
      ignore: "val"
      p: 0.5
    - name: vflip
      ignore: "val"
      p: 0.5
    - name: normalize
      ignore: False
      maxchan: false
      subset: ["sat"]
      custom: [*rgbnir_means, *rgbnir_std]

    - name: normalize
      ignore: true
      maxchan: false
      subset: ["bioclim"]
      custom: [*bioclim_means, *bioclim_std]
    - name: normalize
      ignore: true
      maxchan: false
      subset: ["ped"]
      custom: [*ped_means, *ped_std]
    - name: randomnoise
      ignore: True #false
      std: 0.01
      max_noise: 0.05

  total_species: 684
trainer:
  auto_scale_batch_size: False
