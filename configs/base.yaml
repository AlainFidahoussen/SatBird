#where to save checkpoints
save_path: ""

# load existing checkpoint for inference. If passing experiment folder instead (for multiple seeds), it will evaluate all of them.
load_ckpt_path: ""
save_preds_path: ""
log_comet: true

overfit_batches: 0.0
# maximum number of epochs to train for
max_epochs: 50
# base directory
base_dir: ""
#use geographical information
loc:
  use: False
  #if True :concatenate location features with satellite image features, else location features are mappe to same imension as satellite features and the features are multiplie
  loc_type: "latlon"   #latlon or state
  concat: True
  

comet:
  project_name: "neurips_baselines" #"ecosystem-duck"
  tags: ["resnet18"]
  experiment_name: "" # specify for training, or use to report test results, TODO: also use to resume training
  experiment_key: "" # use to report test results,

experiment:
  #TASK and name should always be ebird_classifier --> maybe remove it 
  #TASK and name should always be ebird_classifier --> maybe remove it
  task: "ebird_classifier"
  name: "ebird_classifier"
  seed: 42
  module:
    #choose model : "resnet18" "resnet50" "inceptionv3" "linear" (just a linear model)
    model: "resnet18"
    #"linear" or "linear_net" for a 2 layer MLP
    fc: "linear"
    #use pretrained weights ( torchvision )
    pretrained: True
    # resume training from another model (transfer learning), set empty if training from scratch
    resume: ""
    # freeze backbone when transfer learning or not
    freeze: False
    #initializes biases of the output layer sothat sigmoid(bias) = mean over the training set for each species
    init_bias: ""
    means_path: ""
    lr: 0.0003

optimizer: "Adam"  #"Adam"

losses:
#scale attribute is just for plotting if the values are very small
  criterion: "CE" #or MAE or MSE or Focal or RMSLE  (loss to choose for optim )

#auto lr will only work if there is only one optimizer
auto_lr_find: False
scheduler:
  name: "ReduceLROnPlateau" #"" for no schuler, "ReduceLROnPlateau" #"ReduceLROnPlateau" or "StepLR" "WarmUp"
  reduce_lr_plateau:
    factor: 0.5
    lr_schedule_patience: 20
  step_lr:
    step_size: 100
    gamma: 0.5
  warmup:
    warmup_epochs: 5
    max_epochs: 100
  cyclical:
    warmup_epochs: 10

variables: &default_vars
    ped_means: &ped_means [2243.6380503 , 1375.25287124,   19.76864701,   18.74593645,
             28.68707303,   60.79010948,   37.63874729,   43.61135346]
    ped_std: &ped_std [2192.82241124,  104.32945499,    7.13089499,    6.49068363,
             20.44677011,    8.44828871,    9.43810439,   12.5079619 ]
    bioclim_means: &bioclim_means [ 1.09754659e+01,  1.23733808e+01,  3.61467365e+01,  8.37485713e+02,
            2.90636300e+01, -6.09117271e+00,  3.51548027e+01,  1.50612062e+01,
            6.45395180e+00,  2.11479405e+01,  5.23920224e-01,  8.94876528e+02,
            1.12537181e+02,  4.15727670e+01,  3.61017403e+01,  3.10993183e+02,
            1.43728751e+02,  2.27954854e+02,  2.16715613e+02]
    bioclim_std: &bioclim_std ([  4.47820155,   2.21161338,   8.0115857 , 204.98822205,
             3.50164049,   6.65999286,   6.16807484,   8.02128829,
            10.6351929 ,   3.69966931,   6.33520431, 361.95098003,
            47.76831975,  27.98050281,  24.19695586, 135.01831158,
            90.12503615, 117.41413006, 146.55134417]

    rgbnir_means: &rgbnir_means [1781.2853091, 1828.38179935, 1580.46310787, 3912.1952206]
    rgbnir_std: &rgbnir_std [786.6640817697212, 643.0713578941586, 612.5347533547798, 1296.637232875431]

    visual_means: &visual_means [78.20186183, 83.78967871, 58.99852628]
    visual_stds: &visual_stds [64.32016159, 49.08529428, 46.45643505]

data:
  loaders:
    num_workers: 8
    batch_size: 128
  #What kind of satellite input ? "refl" for "raw" reflectance values or 
  #"img" for 0-255 values (only supported for "rgb" and "nir" bands)
  datatype: "refl"
  multiscale : [64]
  
  bands: ["r","g","b", "nir"]  #any subset of ["r", "g", "b", "nir"] if working with "refl" data or ["rgb", "nir"] if using "img" 

  res: 10 #resolution of the images

  #o you want to use environmental data (pedological and bioclimatic (low res) data) #ped" or "bioclim" or both or empty list
  env: []#["ped", "bioclim"]
  env_var_sizes: [19, 8]

  #resolution of pedological and bioclimatic data in meters
  ped:
      #pedological rasters
      res: 250
  bioclim:
      #bioclim
      res: 1000

  files:
    base: "/network/projects/ecosystem-embeddings/ebird_dataset/USA_summer"
    train: "summer_hotspots_train.csv"
    val: "summer_hotspots_valid.csv"
    test: "summer_hotspots_test.csv"

    targets_folder: "corrected_targets"
    correction_thresh: "final_range_maps.pkl" # range maps - threshold = False

    rgbnir_means: "stats/means_summer_rgbnir.npy"
    rgbnir_stds: "stats/stds_summer_rgbnir.npy"

    rgb_means: "stats/means_summer_images_visual.npy"
    rgb_stds: "stats/stds_summer_images_visual.npy"

  correction_factor:
     thresh:  # to train with RM

  target:
    type: "probs"  #binary for classification targets  or "probs" for regression (default should be "probs")

    # choose subset of birds : "ducks" for trying on species [37] or [2] for cooper's hawk (non passerine) "songbirds" (307 species) or None (full set 684 species) "not_songbirds"
    subset:

  #normalization: None
  transforms:
    - name: matchres
      ignore: false
      subset: ["bioclim", "ped"]
      target_size: [64, 64]
      custom_means: [*bioclim_means, *ped_means]

    - name: crop
      ignore: false
      p: 1
      ignore_band: ["bioclim", "ped"] #["bioclim", "ped"]
      center: true # disable randomness, crop around the image's center
      height: 64
      width: 64
    - name: hflip
      ignore: "val"
      p: 0.5
    - name: vflip
      ignore: "val"
      p: 0.5
    - name: normalize
      ignore: False
      maxchan: false
      subset: ["sat"]
      custom: [*rgbnir_means, *rgbnir_std]

    - name: normalize
      ignore: true
      maxchan: false
      subset: ["bioclim"]
      custom: [*bioclim_means, *bioclim_std]
    - name: normalize
      ignore: true
      maxchan: false
      subset: ["ped"]
      custom: [*ped_means, *ped_std]
    - name: randomnoise
      ignore: True #false
      std: 0.01
      max_noise: 0.05
      

  total_species: 684
trainer:
  auto_scale_batch_size: False
