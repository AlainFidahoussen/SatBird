#where to save checkpoints
save_path: "checkpoints/kenya_resnet_from_scratch"

# load existing checkpoint for inference. If passing experiment folder instead (for multiple seeds), it will evaluate all of them.
load_ckpt_path: "checkpoints/kenya_resnet_from_scratch"
save_preds_path: ""
log_comet: true

overfit_batches: 0.0
# maximum number of epochs to train for
max_epochs: 50
# base directory
base_dir: ""
#use geographical information
loc:
  use: False
  #if True :concatenate location features with satellite image features, else location features are mappe to same imension as satellite features and the features are multiplie
  loc_type: "latlon"   #latlon or state
  concat: True
  
comet:
  project_name: "neurips_baselines" #"ecosystem-duck"
  tags: ["resnet18"]
  experiment_name: "kenya-resnet-from-scratch" # specify for training, or use to report test results, TODO: also use to resume training
  experiment_key: "" # use to report test results,

experiment:
  #TASK and name should always be ebird_classifier --> maybe remove it 
  task: "ebird_classifier"
  name: "ebird_classifier"
  seed: 42
  module:
    #choose model : "resnet18" "resnet50" "inceptionv3" "linear" (just a linear model)
    model: "resnet18"
    #"linear" or "linear_net" for a 2 layer MLP
    fc: "linear"
    #use pretrained weights ( torchvision )
    pretrained: True
    # resume training from another model (transfer learning), set empty if training from scratch
    resume: ""
    #initializes biases of the output layer sothat sigmoid(bias) = mean over the training set for each species
     # freeze backbone when transfer learning or not
    freeze: False
    init_bias: ""
    means_path: ""
    lr: 0.0003
    use_weighted_loss: True
    loss_weight: "log" #"log", "nchklists"


optimizer: "Adam"  #"Adam"

#auto lr will only work if there is only one optimizer 
auto_lr_find: False
scheduler: 
  name: "ReduceLROnPlateau" #"" for no schuler, "ReduceLROnPlateau" #"ReduceLROnPlateau" or "StepLR" "WarmUp"
  reduce_lr_plateau: 
    factor: 0.5
    lr_schedule_patience: 20
  step_lr:
    step_size: 100 
    gamma: 0.5
  warmup:
    warmup_epochs: 5
    max_epochs: 100
  
  cyclical:
    warmup_epochs: 10

variables: &default_vars
    ped_means: &ped_means [2243.6380503 , 1375.25287124,   19.76864701,   18.74593645,
             28.68707303,   60.79010948,   37.63874729,   43.61135346]
    ped_std: &ped_std [2192.82241124,  104.32945499,    7.13089499,    6.49068363,
             20.44677011,    8.44828871,    9.43810439,   12.5079619 ]

    bioclim_means: &bioclim_means  [19.8474176483999, 12.154894718001223, 77.15069217731747, 
            99.81078205346218, 28.183267340556707, 12.459287786784401, 
            15.72397946204183, 20.392952613384747, 19.14067755664988, 
            20.98105157816683, 18.518370090732752, 936.0373673689066,
             179.3224665538982, 24.524834691680763, 64.37541161481003, 
             397.3427648777487, 97.2606489312625, 277.15392895586655, 144.95832692603415]

           

    bioclim_std: &bioclim_std [3.2981263978688213, 1.6324223404657512, 5.544161337646984, 
                              30.160392484065373, 2.847688328270172, 3.7377247279239874, 1.6193690150909748,
                               3.2084164964858726, 3.5158649695967576, 3.3906761242630563, 3.2418588958542376,
                                292.8185183694009, 53.83569051287938, 15.743267368148034,
                                 20.43196070048235, 120.22160340179309, 61.491741448661955,
                                  86.07142859766066, 111.62228522840688]

    rgbnir_means: &rgbnir_means [1929.20305424, 1704.69622632, 1550.82809414, 2432.25047386]
    rgbnir_std: &rgbnir_std [1211.52480525,  775.86330957, 628.72032381, 1614.65724857]

    visual_means: &visual_means [78.20186183, 83.78967871, 58.99852628]
    visual_stds: &visual_stds [64.32016159, 49.08529428, 46.45643505]

data:
  loaders:
    num_workers: 8
    batch_size: 128
  #What kind of satellite input ? "refl" for "raw" reflectance values or 
  #"img" for 0-255 values (only supported for "rgb" and "nir" bands)
  datatype: "refl"
  multiscale : [64]
  
  bands: ["r","g","b", "nir"]  #any subset of ["r", "g", "b", "nir"] if working with "refl" data or ["rgb", "nir"] if using "img" 
  
  res: 10 #resolution of the images

  #o you want to use environmental data (pedological and bioclimatic (low res) data) #ped" or "bioclim" or both or empty list
  env: [bioclim]#["bioclim"]
  
  #resolution of pedological and bioclimatic data in meters
  ped: 
      #pedological rasters
      res: 250
  bioclim: 
      #bioclim 
      res: 1000
  
  files:
    base: "/network/projects/ecosystem-embeddings/ebird_dataset/Kenya"
    train: "train_hotspots_kenya.csv"
    val: "valid_hotspots_kenya.csv"
    test: "test_hotspots_kenya.csv"
    correction_thresh: "final_range_maps.pkl" # range maps - threshold = False

  correction_factor:
     thresh: False  # to train with RM

  target:
    type: "probs"  #binary for classification targets  or "probs" for regression (default should be "probs")

    # choose subset of birds : "ducks" for trying on species [37] or [2] for cooper's hawk (non passerine) "songbirds" (307 species) or None (full set 684 species) "not_songbirds"
    subset:

  #normalization: None
  transforms:
    - name: matchres
      ignore: false
      subset: ["bioclim"]
      target_size: [64, 64]

    - name: crop
      ignore: false
      p: 1
      ignore_band: ["bioclim", "ped"] #["bioclim", "ped"]
      center: true # disable randomness, crop around the image's center
      height: 64
      width: 64
    - name: hflip
      ignore: "val"
      p: 0.5
    - name: vflip
      ignore: "val"
      p: 0.5
    - name: normalize
      ignore: False
      maxchan: false
      subset: ["sat"]
      custom: [*rgbnir_means, *rgbnir_std]

    - name: normalize
      ignore: true
      maxchan: false
      subset: ["bioclim"]
      custom: [*bioclim_means, *bioclim_std]
    - name: normalize
      ignore: true
      maxchan: false
      subset: ["ped"]
      custom: [*ped_means, *ped_std]
    - name: randomnoise
      ignore: True #false
      std: 0.01
      max_noise: 0.05
      
  total_species: 1054
trainer:
  auto_scale_batch_size: False
