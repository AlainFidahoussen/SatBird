#where to save checkpoints
save_path: "butterfly_baseline_resnet18_RGBNIR_v2_focal_loss"

# load existing checkpoint for inference. If passing experiment folder instead (for multiple seeds), it will evaluate all of them.
load_ckpt_path: "butterfly_baseline_resnet18_RGBNIR_v2_focal_loss"
save_preds_path: ""
log_comet: true

overfit_batches: 0.0
# maximum number of epochs to train for
max_epochs: 100
# base directory
base_dir: ""
#use geographical information
loc:
  use: False
  #if True :concatenate location features with satellite image features, else location features are mappe to same imension as satellite features and the features are multiplie
  loc_type: "latlon"   #latlon or state
  concat: True
  

comet:
  project_name: "neurips_baselines" #"ecosystem-duck"
  tags: ["resnet18"]
  experiment_name: "butterfly_baseline_resnet18_RGBNIR_v2_focal_loss" # specify for training, or use to report test results, TODO: also use to resume training
  experiment_key: "" # use to report test results,

experiment:
  #TASK and name should always be ebird_classifier --> maybe remove it 
  #TASK and name should always be ebird_classifier --> maybe remove it
  task: "ebird_classifier"
  name: "ebird_classifier"
  seed: 42
  module:
    #choose model : "resnet18" "resnet50" "inceptionv3" "linear" (just a linear model)
    model: "resnet18"
    #"linear" or "linear_net" for a 2 layer MLP
    fc: "linear"
    #use pretrained weights ( torchvision )
    pretrained: True
    # resume training from another model (transfer learning), set empty if training from scratch
    resume: ""
    # freeze backbone when transfer learning or not
    freeze: False
    #initializes biases of the output layer sothat sigmoid(bias) = mean over the training set for each species
    init_bias: ""
    means_path: ""
    lr: 0.0003
    loss_func: "focal"

optimizer: "Adam"  #"Adam"

#auto lr will only work if there is only one optimizer
auto_lr_find: False
scheduler:
  name: "ReduceLROnPlateau" #"" for no schuler, "ReduceLROnPlateau" #"ReduceLROnPlateau" or "StepLR" "WarmUp"
  reduce_lr_plateau:
    factor: 0.5
    lr_schedule_patience: 20
  step_lr:
    step_size: 100
    gamma: 0.5
  warmup:
    warmup_epochs: 5
    max_epochs: 100
  cyclical:
    warmup_epochs: 10

variables: &default_vars
    ped_means: &ped_means [1954.4912505229563, 1363.736733595406, 19.313608920109175, 17.537372520567267,
                           32.11444009317606, 58.89855139642786, 35.32706177150302, 47.127172321822485]
    ped_std: &ped_std [2194.6516649251826, 110.81597106623036, 9.729355156361533, 6.99370581234767,
                       23.314670040749974, 8.123141981620352, 9.306674601754972, 12.404424612540323]
    bioclim_means: &bioclim_means [12.253230312726622, 12.030979549681097, 36.4744577772858, 806.1015534043496,
                                   29.436776200581825, -4.421969624786123, 33.85874582311301, 16.863659528175717,
                                   8.11532808995076, 22.01906475930424, 2.1788380886680536, 980.5051592737277,
                                   120.24720183227176, 50.41711931809582, 31.915783737660362,
                                   329.1443299176774, 171.6938417741837, 267.4055193882557, 228.86876922078557]
    bioclim_std: &bioclim_std [5.052473451423352, 2.105185176115935, 8.106983518563572, 194.18796051626583,
                               3.5088726028509694, 7.032113813533729, 5.749606304816395, 8.18228686926079,
                               10.148189974292242, 3.8310827323654912, 6.935282266030776, 329.33959099981917,
                               43.8777234548383, 27.96345195701518, 24.194385704822345, 121.26540594070629,
                               88.11401547252963, 122.10463269150056, 118.91835739256332]

    rgbnir_means: &rgbnir_means [1577.72410351, 1824.80655937, 1742.68208621, 4058.0957505]
    rgbnir_std: &rgbnir_std [725.42679207, 726.68825707, 840.15758313, 1337.02379352]

    visual_means: &visual_means [78.20186183, 83.78967871, 58.99852628]
    visual_stds: &visual_stds [64.32016159, 49.08529428, 46.45643505]

data:
  loaders:
    num_workers: 8
    batch_size: 128
  #What kind of satellite input ? "refl" for "raw" reflectance values or 
  #"img" for 0-255 values (only supported for "rgb" and "nir" bands)
  datatype: "refl"
  multiscale : [64]
  
  bands: ["r","g","b", "nir"]  #any subset of ["r", "g", "b", "nir"] if working with "refl" data or ["rgb", "nir"] if using "img" 

  res: 10 #resolution of the images

  #o you want to use environmental data (pedological and bioclimatic (low res) data) #ped" or "bioclim" or both or empty list
  env: ["bioclim", "ped"]
  env_var_sizes: [19, 8]

  #resolution of pedological and bioclimatic data in meters
  ped:
      #pedological rasters
      res: 250
  bioclim:
      #bioclim
      res: 1000

  files:
    base: "/network/projects/ecosystem-embeddings/ebird_dataset_v2/USA_summer"
    train: "butterfly_hotspots_train.csv"
    val: "butterfly_hotspots_valid.csv"
    test: "butterfly_hotspots_test.csv"

    targets_folder: "butterfly_targets"
    correction_thresh: "final_range_maps.pkl" # range maps - threshold = False

  correction_factor:
     thresh:  # to train with RM

  target:
    type: "probs"  #binary for classification targets  or "probs" for regression (default should be "probs")

    # choose subset of birds : "ducks" for trying on species [37] or [2] for cooper's hawk (non passerine) "songbirds" (307 species) or None (full set 684 species) "not_songbirds"
    subset:

  #normalization: None
  transforms:
    - name: matchres
      ignore: false
      subset: ["bioclim", "ped"]
      target_size: [64, 64]
      custom_means: [*bioclim_means, *ped_means]

    - name: crop
      ignore: false
      p: 1
      ignore_band: ["bioclim", "ped"] #["bioclim", "ped"]
      center: true # disable randomness, crop around the image's center
      height: 64
      width: 64
    - name: hflip
      ignore: "val"
      p: 0.5
    - name: vflip
      ignore: "val"
      p: 0.5
    - name: normalize
      ignore: False
      maxchan: false
      subset: ["sat"]
      custom: [*rgbnir_means, *rgbnir_std]

    - name: normalize
      ignore: true
      maxchan: false
      subset: ["bioclim"]
      custom: [*bioclim_means, *bioclim_std]
    - name: normalize
      ignore: true
      maxchan: false
      subset: ["ped"]
      custom: [*ped_means, *ped_std]
    - name: randomnoise
      ignore: True #false
      std: 0.01
      max_noise: 0.05
      

  total_species: 602
trainer:
  auto_scale_batch_size: False
